{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectUser","changeTodoStatus","className","map","todo","classNames","completed","htmlFor","id","type","checked","onChange","title","onClick","userId","getUser","a","fetch","then","response","ok","Error","json","CurrentUser","state","user","name","email","phone","isUserValid","this","loadUser","prevProps","props","setState","clearUserInfo","React","Component","App","selectedUserId","filterByTitle","filterByStatus","todoCopy","callbackFilterTitle","filterByStatusResult","includes","status","changeFilterTitle","event","target","value","changeFilterByStatus","visibleTodos","filter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4d18d6d0.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[],\n  selectUser: (userId: number) => void,\n  changeTodoStatus: (id: number) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({ todos, selectUser, changeTodoStatus }) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li\n            key={todo.id}\n            className={classNames('TodoList__item', {\n              'TodoList__item--unchecked': !todo.completed,\n              'TodoList__item--checked': todo.completed,\n            })}\n          >\n            <label htmlFor={`${todo.id}`}>\n              <input\n                type=\"checkbox\"\n                id={`${todo.id}`}\n                checked={todo.completed}\n                onChange={() => changeTodoStatus(todo.id)}\n              />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className=\"\n                TodoList__user-button\n                TodoList__user-button--selected\n                button\n              \"\n              type=\"button\"\n              onClick={() => selectUser(todo.userId)}\n            >\n              User&nbsp;#\n              {todo.userId}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\nconst API_URL = 'https://mate.academy/students-api/todos';\n\nexport function getAllTodos(): Promise<Todo[]> {\n  return fetch(API_URL)\n    .then(response => response.json());\n}\n\nexport const getUser = async (userId: number): Promise<User> => {\n  return fetch(`https://mate.academy/students-api/users/${userId}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('404');\n      }\n\n      return response.json();\n    });\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype Props = {\n  userId: number,\n  clearUserInfo: () => void,\n};\n\ntype State = {\n  user: User,\n  isUserValid: boolean,\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: {\n      id: 0,\n      name: '',\n      email: '',\n      phone: '',\n    },\n    isUserValid: true,\n  };\n\n  componentDidMount() {\n    this.loadUser();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.userId !== prevProps.userId) {\n      this.loadUser();\n    }\n  }\n\n  async loadUser() {\n    try {\n      const user = await getUser(this.props.userId);\n\n      this.setState({ user, isUserValid: true });\n    } catch (error) {\n      this.setState({ isUserValid: false });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"CurrentUser\">\n        {this.state.isUserValid\n          ? (\n            <div>\n              <h2 className=\"CurrentUser__title\">\n                <span>\n                  Selected user:\n                  {this.state.user.id}\n                </span>\n              </h2>\n\n              <h3 className=\"CurrentUser__name\">{this.state.user.name}</h3>\n              <p className=\"CurrentUser__email\">{this.state.user.email}</p>\n              <p className=\"CurrentUser__phone\">{this.state.user.phone}</p>\n              <button className=\"button\" type=\"button\" onClick={this.props.clearUserInfo}>Clear</button>\n            </div>\n          )\n          : <h1>User not found</h1>}\n      </div>\n    );\n  }\n}\n","import React, { ChangeEvent } from 'react';\nimport { Todo } from './types/Todo';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getAllTodos } from './api';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[];\n  filterByTitle: string,\n  filterByStatus: string,\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n    filterByTitle: '',\n    filterByStatus: 'all',\n  };\n\n  async componentDidMount() {\n    getAllTodos()\n      .then(todos => {\n        this.setState({ todos });\n      });\n  }\n\n  selectUser = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  clearUserInfo = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  changeTodoStatus = (id: number) => {\n    const todoCopy = this.state.todos.map(todo => {\n      if (todo.id === id) {\n        return { ...todo, completed: !todo.completed };\n      }\n\n      return todo;\n    });\n\n    this.setState(() => ({\n      todos: todoCopy,\n    }));\n  };\n\n  callbackFilterTitle = (todo: Todo) => {\n    const { title, completed } = todo;\n\n    if (this.filterByStatusResult(this.state.filterByStatus) === 'all') {\n      return (title.includes(this.state.filterByTitle));\n    }\n\n    return (title.includes(this.state.filterByTitle)\n      && completed === this.filterByStatusResult(this.state.filterByStatus));\n  };\n\n  filterByStatusResult = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return true;\n      case 'active':\n        return false;\n      default:\n        return 'all';\n    }\n  };\n\n  changeFilterTitle = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ filterByTitle: event.target.value });\n  };\n\n  changeFilterByStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({ filterByStatus: event.target.value });\n  };\n\n  render() {\n    const { selectedUserId } = this.state;\n    const visibleTodos = this.state.todos.filter(this.callbackFilterTitle);\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <span>Filter title</span>\n          <input type=\"text\" value={this.state.filterByTitle} onChange={this.changeFilterTitle} />\n          <select value={this.state.filterByStatus} onChange={this.changeFilterByStatus}>\n            <option value=\"all\">all</option>\n            <option value=\"completed\">completed</option>\n            <option value=\"active\">active</option>\n          </select>\n          <TodoList\n            todos={visibleTodos}\n            selectUser={this.selectUser}\n            changeTodoStatus={this.changeTodoStatus}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={this.state.selectedUserId}\n                clearUserInfo={this.clearUserInfo}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}